name: 'BigLinux Iso Action'
description: 'Installs prerequisites for building Manjaro on ubuntu'

inputs:
  iso-profiles-repo:
    description: 'iso profiles to clone'
    required: false
    default: 'https://gitlab.com/garuda-linux/tools/iso-profiles'
  iso-profiles-branch:
    description: 'branch of the iso profiles to check out'
    required: false
  edition: 
    description: 'name of the iso profile to build'
    required: true
  branch: 
    description: 'stable (default), testing, unstable'
    required: false
    default: stable
  scope:
    description: 'full (default) or minimal image'
    required: false
    default: full
  version:
    description: 'dist_release version (upstream if not given)'
    required: false
  kernel:
    description: 'kernel version'
    required: false
    default: 515
  code-name:
    description: 'manjaro code-name (upstream if not given)'
    required: false
  release-tag:
    description: 'release tag to upload to (if set)'
    required: false
  custom-repo:
    description: 'name a custom repo to be prioritized above the default ones'
    required: false
  office-chooser:
    description: 'include calamares office installer module'
    required: false
    default: "false"
  build-mirror:
    description: 'specific build mirror to use'
    required: false
    default: https://mnvoip.mm.fcix.net/manjaro
  gpg-secret-key-base64:
    description: 'base64 encoded gpg secret key (without a passphrase) to sign the zip (if set)'
    required: false
  gpg-passphrase:
    description: 'phrase to decrypt the gpg secret key if given'
    required: false
  additional-trusted-gpg:
    description: 'gpg keyids that pacman should trust'
    required: false
  cdn77-host:
    description: 'cdn77 upload credentials'
    required: false
  cdn77-user:
    description: 'cdn77 upload credentials'
    required: false
  cdn77-pwd:
    description: 'cdn77 upload credentials'
    required: false
  sf-project:
    description: 'sf upload credentials'
    required: false
  sf-user:
    description: 'sf upload credentials'
    required: false
  sf-key:
    description: 'sf upload credentials'
    required: false
  osdn-project:
    description: 'osdn upload credentials'
    required: false
  osdn-user:
    description: 'osdn upload credentials'
    required: false
  osdn-key:
    description: 'osdn upload credentials'
    required: false
  mesa:
    description: 'alternative mesa'
    required: false
  extrarepo:
    description: 'extra repository to buld package'
    required: false
    
outputs:
  file-path:
    description: "path of the generated iso"
    value: ${{ steps.image-build.outputs.file-path }}

runs:
  using: "composite"
  steps:
  
    # # Tmate ##
    # - name: Setup TMATE Session
    #   uses: mxschmitt/action-tmate@v3
      
    - id: install-build-dependencies
      shell: bash
      run: |
        # echo "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu jammy main" | sudo tee /etc/apt/sources.list.d/apt-fast.list
        # sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B
        sudo apt update
        # sudo apt dist-upgrade
        # sudo apt install \
        # sudo apt-fast dist-upgrade -y
        sudo apt-fast install -y \
          gdisk \
          zip \
          systemd-container \
          bmap-tools \
          asciidoc \
          libarchive-tools \
          git \
          build-essential \
          cmake \
          libarchive-dev \
          pkg-config \
          libcurl4-openssl-dev \
          libgpgme-dev \
          libssl-dev \
          fakeroot \
          dh-autoreconf \
          haveged \
          os-prober \
          kwalify \
          dosfstools \
          libisoburn1 \
          squashfs-tools \
          docbook2x \
          mktorrent \
          doxygen \
          zstd
        sudo python3 -m pip install meson
        sudo python3 -m pip install ninja
        
    - id: no-fsync
      shell: bash
      run: |
        sudo wget https://raw.githubusercontent.com/biglinux/disable-fsync/main/disable-fsync/usr/lib/disable-fsync.so -O /usr/lib/disable-fsync.so
        echo "/usr/lib/disable-fsync.so" | sudo tee -a /etc/ld.so.preload
        sudo ldconfig
        
    - id: install-pacman
      shell: bash
      env:
        PACMAN_VERSION: 6.0.1
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/pacman.git
        pushd pacman
          sudo wget https://sources.archlinux.org/other/pacman/pacman-${PACMAN_VERSION}.tar.xz
          sudo tar -xvf pacman-${PACMAN_VERSION}.tar.xz
          pushd pacman-${PACMAN_VERSION}
            sudo patch -p1 -i ../pacman-sync-first-option.patch
            sudo meson --prefix=/usr \
                      --buildtype=plain \
                      -Ddoc=disabled \
                      -Ddoxygen=enabled \
                      -Dscriptlet-shell=/usr/bin/bash \
                      -Dldconfig=/usr/bin/ldconfig \
                      build
            sudo meson compile -C build
            sudo meson install -C build
          popd
          sudo install -m644 pacman.conf /etc/pacman.conf
          sudo install -m644 makepkg.conf /etc/
          sudo mkdir -p /etc/pacman.d
          sudo touch /etc/pacman.d/mirrorlist
          #echo 'Server = ${{ inputs.build-mirror }}/stable/$repo/$arch' | sudo tee -a /etc/pacman.d/mirrorlist
          #sudo sed -i '/\[core\]/{h;s/.*/\[biglinux-update-stable\]/;p;x;}' /etc/pacman.conf
          #sudo sed -i '/\[core\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' /etc/pacman.conf
          #sudo sed -i '/\[core\]/{h;s/.*/Server = https:\/\/repo.biglinux.com.br\/update-stable\/$arch/;p;x;}' /etc/pacman.conf
          #sudo sed -i '/\[core\]/{h;s/.*//;p;x;}' /etc/pacman.conf
        popd
        
    - id: install-keyrings
      shell: bash
      run: |
        sudo install -dm755 /usr/share/pacman/keyrings/

        # sudo git clone --depth 1 https://gitlab.manjaro.org/packages/core/manjaro-keyring.git
        # pushd manjaro-keyring
        #   sudo install -m0644 manjaro.gpg /usr/share/pacman/keyrings/
        #   sudo install -m0644 manjaro-trusted /usr/share/pacman/keyrings/
        #   sudo install -m0644 manjaro-revoked /usr/share/pacman/keyrings/
        # popd
        
        # sudo git clone --depth 1 https://github.com/biglinux/biglinux-keyring.git
        # pushd biglinux-keyring
        #   sudo install -m0644 biglinux.gpg /usr/share/pacman/keyrings/
        #   sudo install -m0644 biglinux-trusted /usr/share/pacman/keyrings/
        #   sudo install -m0644 biglinux-trusted /usr/share/pacman/keyrings/
        # popd

        mkdir -p archlinux-keyring
        pushd archlinux-keyring
          wget https://archlinux.org/packages/core/any/archlinux-keyring/download -O /tmp/archlinux-keyring.tar.zst
          tar --use-compress-program=unzstd --strip-components=4 --wildcards -xvf /tmp/archlinux-keyring.tar.zst usr/share/pacman/keyrings/*
          sudo install -m0644 archlinux.gpg /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-trusted /usr/share/pacman/keyrings/
          sudo install -m0644 archlinux-revoked /usr/share/pacman/keyrings/
        popd

        sudo pacman-key --init
        sudo pacman-key --populate archlinux

        # for gpg_key in ${{ inputs.additional-trusted-gpg }}; do
        #   sudo pacman-key --keyserver keys.openpgp.org --recv-key $gpg_key
        # done
        
        sudo pacman -Sy
        sudo pacman-key --recv-key 0706B90D37D9B881 FBA220DFC880C036 --keyserver keyserver.ubuntu.com
        sudo pacman-key --lsign-key 0706B90D37D9B881 FBA220DFC880C036
        sudo pacman --noconfirm -U 'https://geo-mirror.chaotic.cx/chaotic-aur/chaotic-'{keyring,mirrorlist}'.pkg.tar.zst'
        echo -e "[garuda]\\nInclude = /etc/pacman.d/chaotic-mirrorlist\\n[chaotic-aur]\\nInclude = /etc/pacman.d/chaotic-mirrorlist" | sudo tee -a /etc/pacman.conf 
        echo "" | sudo tee -a /etc/pacman.conf 
        
    # - id: pull-keys
    #   shell: bash
    #   run: |
    #     sudo git clone https://github.com/biglinux/biglinux-key.git
    #     sudo mkdir -p /etc/pacman.d/gnupg/
    #     sudo cp -r biglinux-key/usr/share/pacman/keyrings/* /etc/pacman.d/gnupg/
    #     sudo rm -r biglinux-key
    #     sudo pacman -Sy
        
    - id: install-arch-install-scripts
      shell: bash
      env:
        VERSION: "24"
      run: |
        sudo wget https://github.com/archlinux/arch-install-scripts/archive/refs/tags/v${VERSION}.tar.gz -O arch-install-scripts.tar.gz
        sudo tar -xvf arch-install-scripts.tar.gz
        sudo make -C arch-install-scripts-${VERSION}
        sudo make -C arch-install-scripts-${VERSION} check
        sudo make -C arch-install-scripts-${VERSION} PREFIX=/usr install
        
        sudo wget https://gitlab.manjaro.org/applications/pacman-mirrors/-/raw/v4.19x-stable/conf/pacman-mirrors.conf -O /etc/pacman-mirrors.conf
        
    - id: install-calamares-tools
      shell: bash
      run: |
        sudo git clone --depth 1 https://gitlab.manjaro.org/applications/calamares-tools.git
        
        cd calamares-tools
        sudo install -d /usr/share/calamares/
        sudo cp -rv schemas/ /usr/share/calamares/
        
    - id: install-mkinitcpio
      shell: bash
      env:
        VERSION: "30"
      run: |
        # sudo wget https://gitlab.archlinux.org/mkinitcpio/mkinitcpio/-/archive/v${VERSION}/mkinitcpio-v${VERSION}.tar.gz
        sudo wget https://github.com/BigLinux-Package-Build/build-iso/raw/main/mkinitcpio/mkinitcpio-v${VERSION}.tar.gz
        sudo tar -xf mkinitcpio-v${VERSION}.tar.gz
        sudo make -C mkinitcpio-v${VERSION} install
        # sudo wget https://github.com/BigLinux-Package-Build/build-iso/raw/main/mkinitcpio/mkinitcpio-${VERSION}.tar.gz
        # sudo tar -xf mkinitcpio-${VERSION}.tar.gz
        # sudo make -C mkinitcpio-${VERSION} install
        sudo sed -i -e 's|File|Path|' /usr/share/libalpm/hooks/*hook
        
    - id: install-garuda-tools
      shell: bash
      env:
        CUSTOM_REPO: ${{ inputs.custom-repo }}
      run: |
        #sudo git clone --depth 1 https://gitlab.manjaro.org/tools/development-tools/manjaro-tools.git
        sudo git clone --depth 1 https://gitlab.com/garuda-linux/tools/garuda-tools.git
        cd garuda-tools
        sudo make SYSCONFDIR=/etc PREFIX=/usr
        sudo make SYSCONFDIR=/etc PREFIX=/usr install_base
        sudo make SYSCONFDIR=/etc PREFIX=/usr install_yaml
        sudo make SYSCONFDIR=/etc PREFIX=/usr install_iso
        # if [ ! -z ${CUSTOM_REPO} ]; then
          # echo "## adding repo [${CUSTOM_REPO}]"
          # # sudo sed -i -e "s/\[core\]/\[${CUSTOM_REPO}\]\nSigLevel = PackageRequired\nInclude = \/etc\/pacman\.d\/mirrorlist\n\n\[core\]/" /usr/share/manjaro-tools/pacman-multilib.conf
        # fi
        # sudo sed -i 's/https:\/\/mirror.alpix.eu\/manjaro/https:\/\/mnvoip.mm.fcix.net\/manjaro\//' /lib/manjaro-tools/util.sh
        # sudo sed -i '/ParallelDownloads/s/#//' /usr/share/manjaro-tools/pacman-multilib.conf
        # sudo sed -i '/ParallelDownloads/s/5/8/' /usr/share/manjaro-tools/pacman-multilib.conf
        
    - id: checkout-iso-profiles
      shell: bash
      env:
        REPO: ${{ inputs.iso-profiles-repo }}
        BRANCH: ${{ inputs.iso-profiles-branch }}
      run: sudo git clone ${BRANCH:+--branch ${BRANCH}} --depth 1 ${REPO} iso-profiles
            
    ## Tmate ##
    - name: Setup TMATE Session
      uses: mxschmitt/action-tmate@v3
    
#     - id: image-build
#       shell: bash
#       env:
#         EDITION: ${{ inputs.edition }}
#         BRANCH: ${{ inputs.branch }}
#         SCOPE: ${{ inputs.scope }}
#         VERSION: ${{ inputs.version }}
#         KERNEL: ${{ inputs.kernel }}
#         CODE_NAME: ${{ inputs.code-name }}
#         OFFICE: ${{ inputs.office-chooser }}
#         BUILD_MIRROR: ${{ inputs.build-mirror }}
#         MESA: ${{ inputs.mesa }}
#         EXTRAREPO: ${{ inputs.extrarepo }}
#       run: |
#         echo "## building iso"
#         [ "$SCOPE" == "minimal" ] && unset SCOPE && unset OFFICE
#         [ "$OFFICE" == "false" ] && unset OFFICE
# 
#         #source the version info from current release info
#         source <(curl -s https://gitlab.manjaro.org/packages/core/manjaro-release/-/raw/master/lsb-release)
#         
#         sudo sed -i -e "s|dist_name=\$(get_distname)|dist_name=${DISTRIB_ID%Linux}|g" /usr/lib/manjaro-tools/util.sh
#         sudo sed -i -e 's|iso_name=$(get_osid)|iso_name=manjaro|g' /usr/lib/manjaro-tools/util.sh
#         sudo sed -i -e "s|dist_release=\$(get_release)|dist_release=${VERSION:-$DISTRIB_RELEASE}|g" /usr/lib/manjaro-tools/util.sh
#         sudo sed -i -e "s|dist_codename=\$(get_codename)|dist_codename=\"${CODE_NAME:-$DISTRIB_CODENAME}\"|g" /usr/lib/manjaro-tools/util.sh
#         #sudo sed -i -e "s|build_mirror='https://manjaro.moson.eu'|build_mirror=\'${BUILD_MIRROR}\'|g" /usr/lib/manjaro-tools/util.sh
#         #troca busca de kerneis para pegar qualquer kernel
#         sudo sed -i '/_kernver=/s/_kernver=.*/_kernver=$(find $1\/usr\/lib\/modules\/ -type f -name version -exec cat {} +)/' /usr/lib/manjaro-tools/util-iso-boot.sh
#         
#         #add repo biglinux-update-stable
#         sudo sed -i '/\[core\]/{h;s/.*/\[biglinux-update-stable\]/;p;x;}' /usr/share/manjaro-tools/pacman-default.conf
#         sudo sed -i '/\[core\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' /usr/share/manjaro-tools/pacman-default.conf
#         sudo sed -i '/\[core\]/{h;s/.*/Server = https:\/\/repo.biglinux.com.br\/update-stable\/$arch/;p;x;}' /usr/share/manjaro-tools/pacman-default.conf
#         sudo sed -i '/\[core\]/{h;s/.*//;p;x;}' /usr/share/manjaro-tools/pacman-default.conf
#         
#         sudo sed -i '/\[core\]/{h;s/.*/\[biglinux-update-stable\]/;p;x;}' /usr/share/manjaro-tools/pacman-multilib.conf
#         sudo sed -i '/\[core\]/{h;s/.*/SigLevel = PackageRequired/;p;x;}' /usr/share/manjaro-tools/pacman-multilib.conf
#         sudo sed -i '/\[core\]/{h;s/.*/Server = https:\/\/repo.biglinux.com.br\/update-stable\/$arch/;p;x;}' /usr/share/manjaro-tools/pacman-multilib.conf
#         sudo sed -i '/\[core\]/{h;s/.*//;p;x;}' /usr/share/manjaro-tools/pacman-multilib.conf
#         
#         #adicionar memtest-efi
#         sudo sed -i '/memtest/{p;s/.*/    cp $1\/boot\/memtest86+\/memtest.efi $2\/memtest-efi/;}' /usr/lib/manjaro-tools/util-iso-boot.sh
#         
#         ## BigLinux Pre Config Build ISO
#         echo "## BigLinux Pre Config Build ISO ##"
#         cd iso-profiles/biglinux-make-iso-profiles
#         sudo bash -x make-iso-profiles  ci/cd $MESA $EXTRAREPO $EDITION
#         cd ../..
#         echo "BUILD_RELEASE=${{ inputs.release-tag }}" | sudo tee -a iso-profiles/community/$EDITION/root-overlay/etc/big-release
#         echo "UNIX_TIMESTAMP=$(( $(date +%s) / 86400 ))" | sudo tee -a iso-profiles/community/$EDITION/root-overlay/etc/big-release
#         if [ "$KERNEL" = "latest" ];then
#           kernelVer=$(pacman -Sl | grep linux[0-9] | grep core | grep -vE "rc|headers" | sort | tail -n1 | cut -d " " -f2 | sed 's/linux//')
#           echo "linux-latest"  | sudo tee -a iso-profiles/community/$EDITION/Packages-Root
#           KERNEL=$kernelVer
#         fi
#         
#         sudo rm -r iso-profiles/biglinux-make-iso-profiles
#         
#         echo $KERNEL
#         echo $EDITION
#         echo $BRANCH
#         echo $SCOPE
#         echo $MESA
#         
#         sudo buildiso ${SCOPE:+-f} -p $EDITION -b $BRANCH -k linux$KERNEL ${OFFICE:+-o}
# 
#         sudo rm -Rf /var/lib/manjaro-tools/buildiso/*
#       
#         OUTPUT_ISO_PATH=$(find /var/cache/manjaro-tools/iso -type f -name "*.iso" -exec stat -c '%Y %n' {} \; | sort -nr | awk 'NR==1 {print $2}')
#         
#         #TARGET_ISO_PATH=$(basename $OUTPUT_ISO_PATH)
#         if [ "$EXTRAREPO" = "testing" ];then
#           TARGET_ISO_PATH=${EDITION}_DEVELOPMENT_${{ inputs.release-tag }}_k$KERNEL.iso
#         #elif [ "$KERNEL" = "latest" ];then
#         #  TARGET_ISO_PATH=${EDITION}_$(echo ${{ inputs.release-tag }} | cut -d "_" -f1 )_k$kernelVer.iso
#         else
#           TARGET_ISO_PATH=${EDITION}_$(echo ${{ inputs.release-tag }} | cut -d "_" -f1 )_k$KERNEL.iso
#         fi
#         sudo mv $OUTPUT_ISO_PATH ./$TARGET_ISO_PATH
#         echo "::set-output name=file-path::$TARGET_ISO_PATH"
# 
#         FILE_PKG=$(find /var/cache/manjaro-tools/iso -type f -name "*-pkgs.txt" -exec stat -c '%Y %n' {} \; | sort -nr | awk 'NR==1 {print $2}')
#         sudo mv $FILE_PKG ./${TARGET_ISO_PATH}.pkgs
#         
#         ls -lh
#         echo ${{ steps.image-build.outputs.file-path }}
#         
#       
#     - id: hash
#       shell: bash
#       run: |
#         echo "## calculating hashes"
#         md5sum ${{ steps.image-build.outputs.file-path }} >${{ steps.image-build.outputs.file-path }}.md5
#         # sha1sum ${{ steps.image-build.outputs.file-path }} >${{ steps.image-build.outputs.file-path }}.sha1
#         # sha256sum ${{ steps.image-build.outputs.file-path }} >${{ steps.image-build.outputs.file-path }}.sha256
#         # sha512sum ${{ steps.image-build.outputs.file-path }} >${{ steps.image-build.outputs.file-path }}.sha512
#         
#     #- id: gpg_sign
#       #shell: bash
#       #run: |
#         ## if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
#         #if [ -z "${{ inputs.gpg-secret-key-base64 }}" ]; then 
#           #echo "## no gpg secret given"
#           #exit 0
#         #fi
#         #echo "## gpg signing"
#         #cat <(echo -e "${{ inputs.gpg-secret-key-base64 }}" | base64 --decode) | gpg --batch --import &>/dev/null
#         #gpg --pinentry-mode loopback --passphrase "${{ inputs.gpg-passphrase }}" --detach-sign ./${{ steps.image-build.outputs.file-path }}
#         
#     - id: upload-prepare
#       shell: bash -O extglob {0}
#       run: |
#         echo "## ssh setup"
#         mkdir -p /home/runner/.ssh
#         touch /home/runner/.ssh/github_actions
#         chmod 600 /home/runner/.ssh/github_actions
#         ssh-agent -a /tmp/ssh_agent.sock > /dev/null
#         echo "::set-output name=upload-files::./${{ steps.image-build.outputs.file-path }}+(|.sha*|.pkgs|.sig|.torrent|.md5)"
#         mkdir -p ${{ inputs.edition }}/${{ inputs.version }}
#         
#     - id: Torrent
#       shell: bash -O extglob {0}
#       env:
#         EXTRAREPO: ${{ inputs.extrarepo }}
#       run: |    
#         #mktorrent -v -a udp://tracker.opentrackr.org:1337 -l 21 \
#         #-w "https://iso.biglinux.com.br/${{ inputs.edition }}/${{ inputs.version }}/${{ steps.image-build.outputs.file-path }}" \
#         #-o ${{ steps.image-build.outputs.file-path }}.torrent ${{ steps.image-build.outputs.file-path }}
#         if [ "$EXTRAREPO" != "testing" ];then
#           mktorrent -v -a udp://tracker.opentrackr.org:1337 -l 21 \
#           -w "https://iso.biglinux.com.br/${{ steps.image-build.outputs.file-path }}" \
#           -w "https://osdn.net/projects/biglinux/storage/${{ steps.image-build.outputs.file-path }}" \
#           -o ${{ steps.image-build.outputs.file-path }}.torrent ${{ steps.image-build.outputs.file-path }}
#         fi
#     
#     - id: upload-github-release
#       shell: bash -O extglob {0}
#       env:
#         EXTRAREPO: ${{ inputs.extrarepo }}
#       run: |
#         # if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
#         # if [ -z "${{ inputs.release-tag }}" ]; then 
#         #   echo "## no release tag given"
#         #   exit 0
#         # fi
#         
#         if [ "$EXTRAREPO" != "testing" ];then
#           echo "## github upload"
#           release=$(echo ${{ steps.image-build.outputs.file-path }} | sed 's/_k.*//')
# 
#           echo ${{ github.token }} | gh auth login --with-token
#           gh release create ${release} --title ${release} --repo ${{ github.repository }} --notes "automated release" || echo "release already exists"
# 
#           GITHUB_LINK=https://github.com/${GITHUB_REPOSITORY}/releases/download/${release}
# 
#           if [[ -z "$(du --threshold=1950M ${{ steps.image-build.outputs.file-path }})" ]]; then
#             # iso is small enough to upload already
#             gh release upload ${release} --repo ${{ github.repository }} --clobber \
#               ${{ steps.upload-prepare.outputs.upload-files }}
#           else
#             # iso is too big - creating a split-zip
#             zip -j -s 1950m ${{ steps.image-build.outputs.file-path }}.zip ${{ steps.image-build.outputs.file-path }}
#             
#             REMOTE_FILES=$(find . -maxdepth 1 -name "*.z*" -exec basename {} \; | xargs -I{} echo "-w \"${GITHUB_LINK}/{}\"")
#             gh release upload ${release} --repo ${{ github.repository }} --clobber \
#               ./${{ steps.image-build.outputs.file-path }}+(.z*|.sha*|.pkgs|.sig|.torrent|.md5)
#           fi
#         else
#           echo "ISO testing subir em outro repo"
#         fi
          
    #- name: upload-sourceforge
      #shell: bash -O extglob {0}
      #env:
        #SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      #run: |
        ## if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
        #if [ -z "${{ inputs.sf-project }}" ] || [ -z "${{ inputs.sf-user }}" ] || [ -z "${{ inputs.sf-key }}" ]; then 
          #echo "## not (all) credentials given for sourceforge upload"
          #exit 0
        #fi
        #echo "## sourceforge upload"
        
        #ssh-keyscan -t rsa frs.sourceforge.net >> /home/runner/.ssh/known_hosts
        #echo "${{ inputs.sf-key }}" >> /home/runner/.ssh/github_actions
        #ssh-add /home/runner/.ssh/github_actions

        ### create target dir
        #rsync -vaP --stats -e ssh ${{ inputs.edition }} \
          #${{ inputs.sf-user }}@frs.sourceforge.net:/home/frs/project/${{ inputs.sf-project }}/

        ### upload
        #rsync -vaP --stats -e ssh ${{ steps.upload-prepare.outputs.upload-files }} \
          #${{ inputs.sf-user }}@frs.sourceforge.net:/home/frs/project/${{ inputs.sf-project }}/${{ inputs.edition }}/${{ inputs.version }}/
          
    #- name: upload-osdn
      #shell: bash -O extglob {0}
      #env:
        #SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      #run: |
        ## if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
        #if [ -z "${{ inputs.osdn-project }}" ] || [ -z "${{ inputs.osdn-user }}" ] || [ -z "${{ inputs.osdn-key }}" ]; then 
          #echo "## not (all) credentials given for osdn upload"
          #exit 0
        #fi
        #echo "## osdn upload"

        #ssh-keyscan -t rsa storage.osdn.net >> /home/runner/.ssh/known_hosts
        #echo "${{ inputs.osdn-key }}" >> /home/runner/.ssh/github_actions
        #ssh-add /home/runner/.ssh/github_actions

        ### create target dir
        #rsync -vaP --stats -e ssh ${{ inputs.edition }} \
          #${{ inputs.osdn-user }}@storage.osdn.net:/storage/groups/m/ma/${{ inputs.osdn-project }}/

        #OSDN_GROUP=$(echo ${{ inputs.osdn-project }} | cut -c 1)/$(echo ${{ inputs.osdn-project }} | cut -c 1-2)

        #rsync -vaP --stats -e ssh ${{ steps.upload-prepare.outputs.upload-files }} \
          #${{ inputs.osdn-user }}@storage.osdn.net:/storage/groups/${OSDN_GROUP}/${{ inputs.osdn-project }}/${{ inputs.edition }}/${{ inputs.version }}/

    #- name: upload-cdn77
      #shell: bash -O extglob {0}
      #run: |
        ## if is not yet supported in composite https://github.com/actions/runner/blob/main/docs/adrs/0549-composite-run-steps.md#if-condition
        #if [ -z "${{ inputs.cdn77-host }}" ] || [ -z "${{ inputs.cdn77-user }}" ] || [ -z "${{ inputs.cdn77-pwd }}" ]; then 
          #echo "## not (all) credentials given for cdn77 upload"
          #exit 0
        #fi
        #echo "## cdn77 upload"
        
        #mktorrent -v -a udp://tracker.opentrackr.org:1337 -l 21 \
          #-w "https://download.manjaro.org/${{ inputs.edition }}/${{ inputs.version }}/${{ steps.image-build.outputs.file-path }}" \
          #-o ${{ steps.image-build.outputs.file-path }}.torrent ${{ steps.image-build.outputs.file-path }}
        
        #ssh-keyscan -t rsa ${{ inputs.cdn77-host }} >> /home/runner/.ssh/known_hosts

        ## create target dir
        #sshpass -p "${{ inputs.cdn77-pwd }}" rsync -vaP --stats -e ssh ${{ inputs.edition }} \
          #${{ inputs.cdn77-user }}@${{ inputs.cdn77-host }}:/www/

        ## upload
        #sshpass -p "${{ inputs.cdn77-pwd }}" rsync -vaP \
          #--stats -e ssh ${{ steps.upload-prepare.outputs.upload-files }} \
          #${{ inputs.cdn77-user }}@${{ inputs.cdn77-host }}:/www/${{ inputs.edition }}/${{ inputs.version }}/
    - name: Tmate Fail
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
